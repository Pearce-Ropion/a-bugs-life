# import standard Python library for SQLite
import sqlite3

# import helper Python script
import constants as c

def insert_into_db(data, table_name):
	db = sqlite3.connect(c.database)

	cursor = db.cursor()

	# gets the list of attributes for this table (except for id, because it is automatically generated by sqlite)
	attributes_list = c.attributes[table_name][1:]

	command = 'INSERT INTO ' + table_name + '('
	
	# insert attributes into command
	for attribute in attributes_list:
		command += (attribute + ',')
	command = command[:-1]
	
	command += ') VALUES('
	# insert '?,' for each of the attributes in the table
	command += ('?,' * len(attributes_list))
	command = command[:-1]
	command += ')'

	values_list = []
	for attribute in attributes_list:
		if attribute == 'labels':
			if len(data[attribute]) > 0:
				value = ','.join(data[attribute])
			else:
				value = None
		else:
			value = data[attribute]
		values_list.append(value)

	db.execute(command, tuple(values_list))
	db.commit()
	db.close()

def update_db(data, table_name):
	db = sqlite3.connect(c.database)

	cursor = db.cursor()

	command = 'UPDATE ' + table_name + ' SET '

	values_list = []

	# gets the list of attributes for this table (except for id, because it is automatically generated by sqlite)
	attributes_list = c.attributes[table_name][1:]
	
	# insert attributes into command
	for attribute in attributes_list:
		if attribute == 'labels':
			if len(data['labels']) > 0:
				command += ('labels=?,')
				value = ','.join(data['labels'])
				values_list.append(value)
			else:
				command += ('labels=NULL,')
		else:
			command += (attribute + '=?,')
			value = data[attribute]
			values_list.append(value)

	command = command[:-1]
	
	command += ' WHERE id=?'
	values_list.append(data['id'])

	db.execute(command, tuple(values_list))
	db.commit()
	db.close()

def get_table_data(table_name, filters=None):
	db = sqlite3.connect(c.database)

	cursor = db.cursor()

	command = get_data_command(table_name, filters)
	cursor.execute(command)

	# gets the list of attributes for this table
	attributes_list = c.attributes[table_name]
	
	data = []
	for row in cursor:
		rowObject = {}
		counter = 0
		
		for attribute in row:
			key = attributes_list[counter]
			
			value = attribute
			# if the attribute is labels, convert a comma-separated String to a list of Strings
			if key == 'labels':
				value = attribute.split(',') if (attribute is not None) else []
			
			rowObject[key] = value
			counter += 1
		
		data.append(rowObject)

	db.close()

	return (data if (len(data) > 0) else None)

def get_data_command(table_name, filters):
	command = 'SELECT * FROM ' + table_name
	
	if (filters is not None) and (len(filters) > 0):
		command += ' WHERE '
		if type(filters[0]) is str:
			# there is only 1 filter
			command += (filters[0] + '=' + str(filters[1]))
		else:
			# there are multiple filters to be added
			for pair in filters:
				command += str(pair[0])
				if pair[1] is None:
					command += ' IS NULL AND '
				else:
					if pair[0] == 'labels':
						value = ','.join(pair[1])
					else:
						value = str(pair[1])
					if type(pair[1]) is int:
						command += ('=' + value + ' AND ')
					else:
						command += ("='" + value + "' AND ")
			
			# removes the ' AND ' after the last filter
			command = command[:-5]
	
	return command